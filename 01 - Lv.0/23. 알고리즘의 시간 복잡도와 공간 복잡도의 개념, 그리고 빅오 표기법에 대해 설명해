# 23. 알고리즘의 시간 복잡도와 공간 복잡도의 개념, 그리고 빅오 표기법에 대해 설명해주세요.

## 복잡도란?

1. 알고리즘의 성능, 효율성을 나타내는 척도
2. 크게 시간(Time Complexity), 공간 복잡도(Space Complexity)로 나눌 수 있음.
3. 각 알고리즘이 주어진 특정 크기의 입력(n)을 기준으로 수행시간(연산) 혹은 사용공간이 얼마나 되는지 객관적으로 비교할 수 있는 기준을 제시함.
4. 복잡도를 나타내는 방법으로는 점근 표기법으로 O(빅오), Ω(오메가), Θ(세타) 등이 있고, 주로 빅오와 세타 표기법이 많이 사용된다.

정리하자면, 복잡도는 `어떤 알고리즘이 효율적인지를 판단하는 척도`라고 생각하면 됨.

알고리즘 평가는 보통 "수행 시간"과 "메모리 사용량"을 기준인대, 수행 시간에 해당되는것이 `시간 복잡도`이고 메모리 사용량에 해당되는 것이 `공간 복잡도` 이다.

## 시간 복잡도 (Time Complexity)

시간 복잡도란??

특정 크기의 입력(n)을 기준으로 할 떄 `필요한 연산의 횟수`

> 이름은 시간 이지만, 실행 시간이 아닌 "연산 횟수"를 세는 이유
> - 모든 OS, IDE 플랫폼에서 동일한 결과가 나오지 않음 -> 알고리즘을 실행시키는 환경이 다를 수 있음.
> - 그러므로 실행 시간 측정을 위한 다른 방법이 "횟수"로 기준


## 공간 복잡도 (Space Complexity)

### 공간 복잡도란??

프로그램 실행과 완료에 얼마나 많은 공간(메모리)가 필요한지를 나타냄

알고리즘을 실행시키기 위해 필요한 공간(space)는 두 가지로 나눌 수 있음

1. 고정 공간(알고리즘과 무관한 공간)
   - 코드가 저장되는 공간, 알고리즘 실행을 위해 시스템이 필요한 공간

2. 가변 공간(알고리즘과 밀접한 공간)
   - 문제를 해결하기 위해 알고리즘이 필요로 하는 공간, 변수를 저장하는 공간, 순환일 경우 순환 스택 등..

### 시간 vs 공간 복잡도

시간복잡도와 공간복잡도는 반비례하는 경향이 있어, 보통 `시간 복잡도`를 위주로 판단


## 빅오 표기법 (Big-O notation)

복잡도를 나타내는 점근 표기법 중 가장 사용되는 표기법

가장 많이 사용되는 이뉴는 알고리즘 효율성을 "상한선 기준"으로 표기하기 떄문
-> 최악의 경우를 고려하는 데 가장 좋은 표기법

> 알고리즘 효율성은 값이 클수록, 즉 그래프가 위로 향할수록 비효율적임


### 수학적 정의

![Image](https://github.com/user-attachments/assets/8ac6dcfd-bc22-4e51-9376-fa7b15435e10)

점근적 상한선 - n0를 기준으로 오른쪽에 있는 모든 n값에 대해 함수 f(n)은 함수 cg(n)보다 같거나 작다는 의미.

즉 빅오 표기법에서는 주어진 알고리즘이 아무리 나빠도 비교하는 함수와 같거나 좋다.
그래프가 아래에 있을수록 수행시간이 짧으므로 성능이 좋은 것.

### 빅오 표기법의 특징

1. 상수항 무시
   -  빅오 표기법은 n이 충분히 크다고 가정하고 있고, 알고리즘의 효율성은 n의 크기에 영향을 받으므로 상수항 같은 사소한 부분은 무시함
   -  O(2n)은 O(n)으로 간주
2. 영향력 없는 항 무시
   - 빅오 표기법은 n의 크기에 영향을 받으므로 가장 영향력이 큰 항 이외에 영향력이 없는 항은 무시
   - O(n^2 + 2n + 1)은 O(n^2)으로 간주


### 시간 복잡도와 빅오 표기법

시간 복잡도는 특정 크기의 입력(n)을 기준으로 실행하는 연산의 횟수 -> 연산의 횟수를 세면 됨

단. 알고리즘에서 핵심이 되는 연산의 횟수만 세야함.

예시 표
<img width="723" alt="Image" src="https://github.com/user-attachments/assets/63c93b2f-fce9-40cb-897b-da371178d09a" />

상수함수 < 로그함수 < 선형함수 < 다항함수 < 지수함수
왼쪽에서 오른쪽으로 갈수록 성능이 떨어지며, 시간 복잡도가 좋지 않은 알고리즘이다.


### 공간 복잡도와 빅오 표기법

공간 복잡도는 알고리즘 실행에 메모리가 얼마나 사용되는 보면 됨
ex) 크기가 n인 배열을 입력으로 주었을 떄, 알고리즘이 "n * n"의 `이차원 배열`을 생성한다면, 공간 복잡도는 "n ^ 2" 이다.


### Big-O 표기법으로 나타낸 자료구조별 시간 복잡도

![Image](https://github.com/user-attachments/assets/e69115fd-51da-4a65-820f-7e021315beab)
