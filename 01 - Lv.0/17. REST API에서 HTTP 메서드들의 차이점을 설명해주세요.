>- `GET`과 `POST`의 차이점은 무엇인가요?

GET은 리소스 가져오는 것이고 POST는 리소스를 생성하는 것 입니다.
조금 더 자세하게 얘기를 하자면, GET은 서버에서 "어떠한 데이터를 가져와서 보여준다"라는 행위를 하고 있고, POST는 서버의 "어떠한 데이터를 추가한다."라고 생각할 수 있습니다.

## 꼬리 질문

> - 그 외에 다른 HTTP 메서드가 있을까요?

PUT, PATCH, DELETE가 있습니다.

> 차이점 얘기해주실수 있나요?

PUT과 PATCH는 비슷한 성격을 가지고 있는 함수이지만, 요구하는 동작에 따라서 선택해야 합니다.
PUT은 현재 존재하는 리소스의 전체적인 업데이트 하는 경우에 사용 하고, PATCH는 부분 리소스의 업데이트의 경우 사용 합니다. PATCH 사용 시 주의점이 있는데, 대부분의 웹서버 및 브라우저에서 지원하지 않는 경우도 있습니다. IE8, PHP, Django 프로그램 사용시 주의가 필요 합니다.
DELETE는 리소스를 삭제하는데 사용합니다.

> HTTP 메서드들을 잘 설명해주셨는데, 그럼 RESTful API에 무엇인가요?

API 개발자는 여러 아키텍처를 사용하여 API를 설계할 수 있는데, RESTful API는 REST 아키텍처 스타일을 따르는 API를 REST API 입니다.
즉 두 컴퓨터 시스템이 인터넷을 통해 정보를 안전하게 교환하기 위해 사용하는 인터페이스 입니다.

RESTful API에서 REST, API 나누어서 생각해보면 더 이해가 잘 이해할 수 있습니다.
REST는 API 작동 방식에 대한 조건을 부과하는 SW아키텍처 입니다. 인터넷과 같은 복잡한 네트워크에서 통신을 관리하기 위한 지침으로 만들어 졌습니다.
API는 서로 다른 애플리케이션을 서로 연결하여 통신할 수 있게 만든 인터페이스 입니다.
레스토랑을 예를 들어보겠습니다.
고객, 점원, 주방이 있다고 하면, 어떤 역활이 API역활을 하고 있을까요?
바로 "점원"입니다.
상황으로 예로 들어 봅시다.
1. 점원이 손님에게 주문 가능한 메뉴를 보여줍니다.
2. 점원이 손님이 선택한 메뉴를 주방에 전달합니다.
3. 점원이 주방에서 손님이 선택한 음식이 나오면 손님에게 전달합니다.
점원이 손님과 상호작용한 후 주방과도 상호작용합니다.
요약하자면 손님은 "점원"을 통해 주방에 요구하고, 주방도 "점원"을 통해 손님에게 제공합니다.
이때 손님과 주방을 서로 다른 응용프로그램으로 생각하고, 점원을 API로 생각한다면, API의 역활에 대해 이해할 수 있습니다.
